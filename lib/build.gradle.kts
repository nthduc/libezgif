    /*
     * This file was generated by the Gradle 'init' task.
     *
     * This generated file contains a sample Kotlin library project to get you started.
     * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
     * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
     */
    import org.gradle.api.publish.PublishingExtension

    @Suppress("DSL_SCOPE_VIOLATION")
    plugins {
        // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
        id("org.jetbrains.kotlin.jvm") version "1.8.10"
        id("maven-publish")
        id("signing")

        // Apply the java-library plugin for API and implementation separation.
        `java-library`
    }

    group = "io.github.nthduc.ezgif"
    version = "0.0.7"

    repositories {
        // Use Maven Central for resolving dependencies.
        mavenCentral()
    }

    dependencies {
        // Use the Kotlin JUnit 5 integration.
        testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

        // Use the JUnit 5 integration.
        testImplementation("org.junit.jupiter:junit-jupiter-engine:5.9.1")

        // This dependency is exported to consumers, that is to say found on their compile classpath.
        api("org.apache.commons:commons-math3:3.6.1")

        // This dependency is used internally, and not exposed to consumers on their own compile classpath.
        implementation("com.google.guava:guava:31.1-jre")
        implementation(libs.ktor.server.core.jvm)
        implementation(libs.ktor.server.netty.jvm)
        implementation(libs.ktor.server.status.pages.jvm)
        implementation(libs.ktor.server.default.headers.jvm)
        implementation(libs.ktor.server.cors)
        implementation(libs.ktor.server.content.negotiation)
        implementation(libs.ktor.client.core)
        implementation(libs.ktor.client.json)
        implementation(libs.ktor.client.gson)
        implementation(libs.ktor.client.cio)
        implementation(libs.ktor.client.content.negotiation)
        implementation(libs.ktor.client.apache)
        implementation(libs.ktor.client.serialization)
        implementation(libs.ktor.kotlinx.json)
        implementation(libs.json)
        implementation(libs.jsoup)

    }

    // Apply a specific Java toolchain to ease working on different environments.
    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(17))
        }
    }

    tasks.named<Test>("test") {
        // Use JUnit Platform for unit tests.
        useJUnitPlatform()
    }
    tasks.register<Jar>("javadocJar") {
        archiveClassifier.set("javadoc")
        from(tasks.getByName("javadoc"))
    }

    tasks.register<Jar>("sourcesJar") {
        archiveClassifier.set("sources")
        from(sourceSets["main"].allSource)
    }

    artifacts {
        add("archives", tasks["javadocJar"])
        add("archives", tasks["sourcesJar"])
    }

    publishing {
        publications {
            create<MavenPublication>("mavenJava") {
                from(components["java"])
                groupId = "io.github.nthduc"
                artifactId = "ezgif"
                version = "0.0.7"

                pom {
                    name.set("Library Ezgif")
                    packaging = "jar"
                    description.set("including method convert image format webp , gif , png , jpg")
                    url.set("https://github.com/nthduc/libezgif")

                    scm {
                        connection.set("scm:svn:http://foo.googlecode.com/svn/trunk/")
                        developerConnection.set("scm:svn:https://foo.googlecode.com/svn/trunk/")
                        url.set("http://foo.googlecode.com/svn/trunk/")
                    }

                    licenses {
                        license {
                            name.set("The Apache License, Version 2.0")
                            url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
                        }
                    }

                    developers {
                        developer {
                            id.set("nthduc")
                            name.set("Nguyen Thai Duc")
                            email.set("nguyenthaiduc0212@gmail.com")
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                name = "OSSRH"
                url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
                credentials {
                    username = project.findProperty("ossrhUsername") as String?
                    password = project.findProperty("ossrhPassword") as String?
                }
            }

            maven {
                name = "OSSRH"
                url = uri("https://s01.oss.sonatype.org/content/repositories/releases/")
                credentials {
                    username = project.findProperty("ossrhUsername") as String?
                    password = project.findProperty("ossrhPassword") as String?
                }
            }

        }
    }

    signing {
        sign(publishing.publications["mavenJava"])
    }
